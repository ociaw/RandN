<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#
var types = new Type[]
{
    typeof(TimeSpan),
    typeof(Decimal),
    typeof(SByte),
    typeof(Int16),
    typeof(Int32),
    typeof(Int64),
    typeof(Byte),
    typeof(UInt16),
    typeof(UInt32),
    typeof(UInt64),
    typeof(Single),
    typeof(Double)
};
#>
using System;
// ReSharper disable RedundantNameQualifier

/*** This file is auto generated - any changes made here will be lost. ***/
namespace RandN.Distributions;

/// <summary>
/// A uniform distribution where each possible value has an equal probability of occurring.
/// </summary>
public static partial class Uniform
{
<#
foreach (var type in types)
{
    String typeName = type.Name;
    String fullTypeName = type.FullName;
#>
    /// <summary>
    /// Creates uniform distribution in the interval [low, high), inclusive of low and exclusive of high.
    /// </summary>
    /// <param name="low">The inclusive lower bound.</param>
    /// <param name="high">The exclusive upper bound.</param>
    /// <exception cref="ArgumentOutOfRangeException">
    /// Thrown when <paramref name="low"/> is greater than or equal to <paramref name="high"/>.
    /// </exception>
    public static Uniform.<#= typeName #> New(<#= fullTypeName #> low, <#= fullTypeName #> high) => Uniform.<#= typeName #>.Create(low, high);

    /// <summary>
    /// Creates uniform distribution in the interval [low, high], inclusive of low and high.
    /// </summary>
    /// <param name="low">The inclusive lower bound.</param>
    /// <param name="high">The inclusive upper bound.</param>
    /// <exception cref="ArgumentOutOfRangeException">
    /// Thrown when <paramref name="low"/> is greater than <paramref name="high"/>.
    /// </exception>
    public static Uniform.<#= typeName #> NewInclusive(<#= fullTypeName #> low, <#= fullTypeName #> high) => Uniform.<#= typeName #>.CreateInclusive(low, high);

<#
}
#>
}
